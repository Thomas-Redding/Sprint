+(int x, int y) -> int {
	
}

+(int x, in ty) -> int;
+(int x, in ty) -> int {
	
}
+<T>(int x, in ty) -> int;
+<T>(int x, in ty) -> int {
	
}



/*

void foo() -> void;

class LinkedList<T> : List<T> {
	int x;
}

sum<T>(List<T> list) -> Foo<5> {
	T rtn;
	return  List<double>(rtn) < 5;
}

class Foo extends Parent {
	int16 bar, foo;
	public:
	Vector<Vector<double> > bar;
	+(int x, int y) -> int {

	}
	int32 x;
}

class List<V, int x, F> {
	List() {
		int x = 5;
		int z = (5+2)*3;
		int y = 8 and 9 or 5 * 3 + 2;
		int arr = [2, 5, 9];
		int dic = {1: 2, 3: 4, 5: 6};
		for (int i=0; i<arr.length; i++) {
			x = z+-y;
		}
	}
	push(V item) -> void
	insert(uint index, V item)
	pop() -> V
	remove(uint index) -> V
	at(uint index) -> V {
		return arr[index]
	}

	clear()
		length = 0

	isEmpty()
		return length == 0

	readonly V* arr
	readonly uint length = 0

	private uint capacity = 20
	private void expand()
}
*/